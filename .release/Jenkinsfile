def branchName = env.BRANCH_NAME
def escapedBranch = branchName.toLowerCase().replaceAll("/","_")
def slackChannel = 'components-ci'
def m2 = "/tmp/jenkins/tdi/m2/${escapedBranch}"

pipeline {
    agent {
        kubernetes {
            label 'connectors-se-release'
            yaml """
apiVersion: v1
kind: Pod
spec:
    containers:
        -
            name: main
            image: 'jenkinsxio/builder-maven:0.1.60'
            command: [cat]
            tty: true
            volumeMounts: [{name: docker, mountPath: /var/run/docker.sock}, {name: m2main, mountPath: /root/.m2/repository}]
            resources: {requests: {memory: 3G, cpu: '2'}, limits: {memory: 8G, cpu: '2'}}
    volumes:
        -
            name: docker
            hostPath: {path: /var/run/docker.sock}
        -
            name: m2main
            hostPath: { path: ${m2} }
"""
        }
    }

    environment {
        MAVEN_OPTS = '-Dmaven.artifact.threads=128 -Dorg.slf4j.simpleLogger.showThreadName=true -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss'
        TALEND_REGISTRY = 'registry.datapwn.com'
    }

    parameters {
        string(name: 'RELEASE_VERSION', defaultValue: '', description: 'The version to be released')
        string(name: 'MAINTENANCE_VERSION', defaultValue: '', description: 'Maintenance branch version. To create a branch under maintenance/MAINTENANCE_VERSION ')
    }

    options {
        buildDiscarder(logRotator(artifactNumToKeepStr: '5', numToKeepStr: '50'))
        timeout(time: 60, unit: 'MINUTES')
        skipStagesAfterUnstable()
    }

    stages {
        stage('Check branch and params'){
            steps {
                container('main') {
                    script {
                        if (env.BRANCH_NAME != "master" || !env.BRANCH_NAME.startWith("maintenance/")) {
                            currentBuild.result = 'ABORTED'
                            error('You can only release from a master or maintenance branch. the branch was : ' + env.BRANCH_NAME)
                        }
                        if (parameters.RELEASE_VERSION.isEmpty() || params.MAINTENANCE_VERSION.isEmpty()) {
                            currentBuild.result = 'ABORTED'
                            error(' RELEASE_VERSION and MAINTENANCE_VERSION can\'t be empty' + env.BRANCH_NAME)
                        }
                    }
                }
            }
        }
        stage('Perform Release') {
            steps {
                container('main') {
                    withCredentials([
                            usernamePassword(
                                    credentialsId: 'nexus-artifact-zl-credentials',
                                    usernameVariable: 'NEXUS_USER',
                                    passwordVariable: 'NEXUS_PASSWORD')
                    ]) {
                        sh "cd ci_nexus && mvn -e -U -B -s .jenkins/settings.xml clean deploy scm:tag scm:branch -DpushChanges=false -Drevision=${params.RELEASE_VERSION} -Dmaintenance=${params.MAINTENANCE_VERSION}"
                    }
                }
            }
        }
    }
    post {
        success {
            slackSend(color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "${slackChannel}")
        }
        failure {
            slackSend(color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "${slackChannel}")
        }
    }
}
